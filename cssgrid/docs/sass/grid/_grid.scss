@charset "UTF-8";
////////////////////////////////////////////////////////////////////////////////
// Defaults (feel free to override)
////////////////////////////////////////////////////////////////////////////////

// Defaults which you can freely override
$column-width: 4% !default;
$gutter-width: 1% !default;
$columns: 20 !default;
$total-width: 100% !default;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// ie6、7对百分比的计算规则是四舍五入；为了hack我们需要将五入变成舍去；
// eg:12.5px变成12px,12.75px变成12.25;公式为:O.5 / containerWidth = correctionLevel
// 因此要hackie 就需要计算出存在五入的容器的宽度
$min-width: 9999999 !default;
$isfixie: false !default;


////////////////////////////////////////////////////////////////////////////////
// GRID MATH
////////////////////////////////////////////////////////////////////////////////

// Utility function — you should never need to modify this
@function gridsystem-width($columns:$columns) {
  @return ($column-width * $columns) + ($gutter-width * $columns);
}

@function correction($columns:$columns) {
  @return 0.5 / $min-width * gridsystem-width($columns);
}
//@param x {num} 列数
//@param columns {num} 父级列数,默认初始值
//@return 返回所需要的列宽 
@function width($x,$columns:$columns) {
  @return $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
}

//@param x {num} 列数
//@param columns {num} 父级列数,默认初始值
//@return 返回所需要的列的间距宽度 
@function margin($x,$columns:$columns) {
  @return $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
////////////////////////////////////////////////////////////////////////////////
// BASIC MIXINS
////////////////////////////////////////////////////////////////////////////////

@mixin clearfix() {
  *zoom:1;

  &:before,
  &:after {
    content:"";
    display:table;
  }
  &:after {
    clear:both;
  }
}
@mixin row($columns:$columns) {
  display: block;
  width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
  margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
  @if $isfixie{
    @include row-fix-ie6-ie7($columns:$columns);
  }
  @include clearfix();
}
//@param x {num} 列数
//@param columns {num} 父级列数,默认初始值
@mixin column($x,$columns:$columns) {
  float: left;
  width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
  margin-left: $total-width*(($gutter-width*.5)/gridsystem-width($columns));
  margin-right: $total-width*(($gutter-width*.5)/gridsystem-width($columns));
  display: inline;
  zoom:1;
  @if $isfixie{
    @include column-fix-ie6-ie7($x,$columns:$columns);
  }
}
@mixin push($offset:1) {
  margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
@mixin pull($offset:1) {
  margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
@mixin column-fix-ie6-ie7($x,$columns:$columns) {
  *width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns)) - correction($columns);
  *margin-right: $total-width*(($gutter-width*.5)/gridsystem-width($columns)) - correction($columns);
  *margin-left: $total-width*(($gutter-width*.5)/gridsystem-width($columns)) - correction($columns);
}
@mixin row-fix-ie6-ie7($columns:$columns) {
  *width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns))-correction($columns);
  *margin-left: $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)-correction($columns);
  *margin-right: $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)-correction($columns);
}

@mixin container(){
  width: container_width();
  margin: 0 $container_margin;
}
////////////////////////////////////////////////////////////////////////////////
// HELPER CLASSES
////////////////////////////////////////////////////////////////////////////////

//用于demo中生成class
//可以去掉
$container_margin: 1%;
$class_row:        'row';
$class_column:'col';
$class_push:'push';
$class_pull:'pull'; 
@mixin generate_helper_classes(){

        /* Helper Class: Columns */ 
        @for $i from 1 through $columns{
                .#{$class_column}#{$i} {
                        @include column($i)
                }
        }

        /* Helper Class: Rows */ 
        @for $i from 1 through $columns{
                .#{$class_row}#{$i} {
                        @include row($i)
                }
        }
        /* Helper Class: Columns && Parent Columns */ 
        @for $i from 1 through $columns{
                        
                @for $j from $i through $columns{
                        .#{$class_column}#{$i}-#{$j} {
                                @include column($i,$j)
                        }
                }
        }

        /* Helper Class: push */ 
        @for $i from 1 through ($columns - 1){
                .#{$class_push}#{$i} {
                        @include push($i);
                }
        }
        /* Helper Class: pull */ 
        @for $i from 1 through ($columns - 1){
                .#{$class_pull}#{$i} {
                        @include pull($i);
                }
        }

}
